#!/bin/bash
# Script de r√©solution des probl√®mes Logstash identifi√©s

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[+] $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}[!] $1${NC}"
}

print_error() {
    echo -e "${RED}[-] $1${NC}"
}

if [ "$EUID" -ne 0 ]; then
    print_error "Ce script doit √™tre ex√©cut√© en tant que root"
    exit 1
fi

print_status "=== R√©solution des probl√®mes Logstash ==="

# 1. ARR√äTER TOUS LES PROCESSUS LOGSTASH
print_status "1. Arr√™t de tous les processus Logstash..."

# Arr√™ter le service systemd
systemctl stop logstash 2>/dev/null

# Tuer tous les processus Logstash restants
print_warning "Recherche des processus Logstash actifs..."
LOGSTASH_PIDS=$(ps aux | grep logstash | grep -v grep | awk '{print $2}')

if [ ! -z "$LOGSTASH_PIDS" ]; then
    echo "Processus trouv√©s: $LOGSTASH_PIDS"
    for pid in $LOGSTASH_PIDS; do
        echo "Arr√™t du processus $pid..."
        kill -TERM $pid 2>/dev/null || kill -KILL $pid 2>/dev/null
    done
    sleep 5
    
    # V√©rifier si des processus restent
    REMAINING=$(ps aux | grep logstash | grep -v grep | wc -l)
    if [ $REMAINING -gt 0 ]; then
        print_error "Des processus Logstash r√©sistent, force kill..."
        pkill -9 -f logstash
    fi
else
    echo "Aucun processus Logstash trouv√©"
fi

print_status "‚úì Tous les processus Logstash arr√™t√©s"

# 2. NETTOYER LES VERROUS ET DONN√âES
print_status "2. Nettoyage des verrous et donn√©es..."

# Supprimer les fichiers de verrouillage
rm -f /var/lib/logstash/.lock
rm -f /var/lib/logstash/logstash.lock
rm -rf /var/lib/logstash/queue
rm -rf /var/lib/logstash/dead_letter_queue

# Nettoyer les sincedb (positions de lecture des fichiers)
rm -f /var/lib/logstash/sincedb_*

# Nettoyer les logs anciens
rm -f /var/log/logstash/logstash-plain.log.*
rm -f /var/log/logstash/logstash-deprecation.log.*

print_status "‚úì Nettoyage termin√©"

# 3. RECR√âER LA STRUCTURE PROPREMENT
print_status "3. Recr√©ation de la structure Logstash..."

# Recr√©er les r√©pertoires avec bonnes permissions
mkdir -p /var/lib/logstash
mkdir -p /var/log/logstash
mkdir -p /etc/logstash/conf.d

# Permissions correctes
chown -R logstash:logstash /var/lib/logstash
chown -R logstash:logstash /var/log/logstash
chown -R logstash:logstash /etc/logstash

# Permissions sp√©cifiques
chmod 755 /var/lib/logstash
chmod 755 /var/log/logstash
chmod 750 /etc/logstash

print_status "‚úì Structure recr√©√©e"

# 4. CONFIGURATION ULTRA-MINIMALE
print_status "4. Cr√©ation d'une configuration minimale fonctionnelle..."

# Supprimer toutes les configurations existantes
rm -f /etc/logstash/conf.d/*.conf

# Configuration Logstash ultra-simple
cat > /etc/logstash/logstash.yml << 'EOF'
# Configuration Logstash ultra-minimale
node.name: logstash-honeypot
path.data: /var/lib/logstash
path.logs: /var/log/logstash
path.settings: /etc/logstash
pipeline.workers: 1
pipeline.batch.size: 125
http.host: "192.168.2.124"
http.port: 9600
log.level: info
EOF

# Pipeline ultra-simple pour test
cat > /etc/logstash/conf.d/00-test-minimal.conf << 'EOF'
input {
  heartbeat {
    interval => 10
    type => "heartbeat"
  }
}

output {
  elasticsearch {
    hosts => ["192.168.2.124:9200"]
    index => "logstash-test-%{+YYYY.MM.dd}"
  }
}
EOF

# Permissions
chown logstash:logstash /etc/logstash/logstash.yml
chown logstash:logstash /etc/logstash/conf.d/00-test-minimal.conf
chmod 644 /etc/logstash/logstash.yml
chmod 644 /etc/logstash/conf.d/00-test-minimal.conf

print_status "‚úì Configuration minimale cr√©√©e"

# 5. TEST DE CONFIGURATION
print_status "5. Test de la configuration..."

if sudo -u logstash /usr/share/logstash/bin/logstash --path.settings /etc/logstash -t; then
    print_status "‚úì Configuration valid√©e"
else
    print_error "‚úó Erreur de configuration"
    exit 1
fi

# 6. V√âRIFICATIONS PR√âALABLES
print_status "6. V√©rifications pr√©alables..."

# V√©rifier Elasticsearch
if curl -s "http://192.168.2.124:9200/" >/dev/null; then
    print_status "‚úì Elasticsearch accessible"
else
    print_error "‚úó Elasticsearch non accessible"
    exit 1
fi

# V√©rifier Java
if java -version >/dev/null 2>&1; then
    print_status "‚úì Java disponible"
else
    print_error "‚úó Java non disponible"
    exit 1
fi

# V√©rifier les permissions
if [ -w "/var/lib/logstash" ] && [ -w "/var/log/logstash" ]; then
    print_status "‚úì Permissions OK"
else
    print_error "‚úó Probl√®me de permissions"
    chown -R logstash:logstash /var/lib/logstash /var/log/logstash
fi

print_status "‚úì Toutes les v√©rifications pass√©es"

# 7. CR√âATION D'UN SCRIPT DE TEST S√âCURIS√â
cat > /opt/elk-scripts/test_logstash_safe.sh << 'EOF'
#!/bin/bash
echo "=== Test s√©curis√© de Logstash ==="

echo "1. V√©rification qu'aucun processus Logstash n'est actif..."
if ps aux | grep -v grep | grep -q logstash; then
    echo "‚ùå Processus Logstash encore actifs!"
    ps aux | grep logstash | grep -v grep
    exit 1
fi
echo "‚úÖ Aucun processus Logstash actif"

echo ""
echo "2. Test de configuration..."
if sudo -u logstash /usr/share/logstash/bin/logstash --path.settings /etc/logstash -t; then
    echo "‚úÖ Configuration OK"
else
    echo "‚ùå Configuration invalide"
    exit 1
fi

echo ""
echo "3. Test de connectivit√© Elasticsearch..."
if curl -s "http://192.168.2.124:9200/" >/dev/null; then
    echo "‚úÖ Elasticsearch accessible"
else
    echo "‚ùå Elasticsearch non accessible"
    exit 1
fi

echo ""
echo "4. D√©marrage du service..."
systemctl start logstash

echo ""
echo "5. Attente du d√©marrage (30s max)..."
counter=0
while [ $counter -lt 30 ]; do
    if systemctl is-active --quiet logstash; then
        echo "‚úÖ Logstash d√©marr√© avec succ√®s"
        break
    fi
    echo -n "."
    sleep 2
    counter=$((counter + 2))
done

echo ""
echo "6. V√©rification finale..."
echo "Service: $(systemctl is-active logstash)"
echo "API: $(curl -s http://192.168.2.124:9600/ >/dev/null 2>&1 && echo "OK" || echo "NOK")"

if systemctl is-active --quiet logstash; then
    echo ""
    echo "üéâ SUCC√àS! Logstash fonctionne"
else
    echo ""
    echo "‚ùå √âchec - V√©rifiez les logs:"
    journalctl -u logstash --no-pager -n 10
fi
EOF

chmod +x /opt/elk-scripts/test_logstash_safe.sh

print_status "=== R√©solution termin√©e ==="
echo ""
print_warning "√âTAPES SUIVANTES:"
echo "1. Lancer le test: /opt/elk-scripts/test_logstash_safe.sh"
echo "2. Si succ√®s, ajouter progressivement vos pipelines"
echo "3. Surveiller: journalctl -u logstash -f"
echo ""
print_status "Logstash pr√™t pour un nouveau d√©marrage propre!"